"""
Django settings for ShippingService project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import pytz
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
if 'SECRET_KEY' in os.environ:
    SECRET_KEY = os.environ['SECRET_KEY']
else:
    SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


ALLOWED_HOSTS = ['www.zitto.co.ke','zitto.co.ke','localhost']


# Application definition
INSTALLED_APPS = [
    'service.apps.ServicecConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django_static_fontawesome",
    "storages",
    "eb_sqs_worker",
    "django.contrib.humanize",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ShippingService.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates/')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ShippingService.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases



if 'RDS_HOSTNAME' in os.environ:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ['RDS_DB_NAME'],
            'USER': os.environ['RDS_USERNAME'],
            'PASSWORD': os.environ['RDS_PASSWORD'],
            'HOST': os.environ['RDS_HOSTNAME'],
            'PORT': os.environ['RDS_PORT'],
        }
    }
else:
    DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        }
    }





# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

LOGIN_URL = "/login"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR,'static')


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



#---------------------------------------Secrets to be stored safely---------------------------------------

if 'CALL_BACK_URL' in os.environ:
    CALL_BACK_URL = os.environ['CALL_BACK_URL']
    CONSUMER_KEY = os.environ['CONSUMER_KEY']
    CONSUMER_SECRET = os.environ['CONSUMER_SECRET']
    BUSINESS_SHORT_CODE = os.environ['BUSINESS_SHORT_CODE']
    LIPA_NA_MPESA_PASSKEY = os.environ['LIPA_NA_MPESA_PASSKEY']
else:
    CALL_BACK_URL = config("CALL_BACK_URL")
    CONSUMER_KEY = config("CONSUMER_KEY")
    CONSUMER_SECRET = config("CONSUMER_SECRET")
    BUSINESS_SHORT_CODE = config("BUSINESS_SHORT_CODE")
    LIPA_NA_MPESA_PASSKEY = config("LIPA_NA_MPESA_PASSKEY")



ACCESS_TOKEN_API_URL = "https://api.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials"
PROCESS_REQUEST_API_URL = "https://api.safaricom.co.ke/mpesa/stkpush/v1/processrequest"
B2C_PROXY_URL = "https://api.safaricom.co.ke/mpesa/b2c/v1/paymentrequest"



#---------------------------------------------Static files setup------------------

AWS_S3_REGION_NAME = 'eu-west-1' 

if 'AWS_ACCESS_KEY_ID' in os.environ:
    AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']
    AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']
    AWS_STORAGE_BUCKET_NAME = os.environ['AWS_STORAGE_BUCKET_NAME']
    AWS_S3_FILE_OVERWRITE = True
else:
    AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_FILE_OVERWRITE = config("AWS_S3_FILE_OVERWRITE")

# Tell django-storages the domain to use to refer to static files.
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
AWS_DEFAULT_ACL = None

# Tell the staticfiles app to use S3Boto3 storage when writing the collected static files (when
# you run `collectstatic`).

# STATICFILES_LOCATION = 'static'
# STATICFILES_STORAGE = 'custom_storages.StaticStorage'



#---------------------------------------------Email Setup-----------------------------------------

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtppro.zoho.com'
EMAIL_USE_TLS = True

if 'EMAIL_HOST_PASSWORD' in os.environ:
    EMAIL_PORT = os.environ['EMAIL_PORT']
    EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']
else:
    EMAIL_PORT = config("EMAIL_PORT")
    EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")


#---------------------------------------------SQS Stuff--------------------------------------------
AWS_EB_DEFAULT_REGION = "eu-west-1"    


if 'AWS_EB_HANDLE_SQS_TASKS' in os.environ:
    AWS_EB_HANDLE_SQS_TASKS=os.environ['AWS_EB_HANDLE_SQS_TASKS']  
    AWS_EB_DEFAULT_QUEUE_NAME = os.environ['AWS_EB_DEFAULT_QUEUE_NAME']
else:
    AWS_EB_HANDLE_SQS_TASKS=config("AWS_EB_HANDLE_SQS_TASKS") 
    AWS_EB_DEFAULT_QUEUE_NAME = config("AWS_EB_DEFAULT_QUEUE_NAME")
